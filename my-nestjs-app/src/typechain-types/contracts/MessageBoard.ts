/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MessageBoardInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getMessage"
      | "getMessageCount"
      | "getUserMessage"
      | "getUserMessageCount"
      | "messages"
      | "postMessage"
      | "userMessages"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NewMessage"): EventFragment;

  encodeFunctionData(
    functionFragment: "getMessage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMessage",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMessageCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "messages",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "postMessage", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userMessages",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getMessage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMessageCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMessageCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "messages", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userMessages",
    data: BytesLike
  ): Result;
}

export namespace NewMessageEvent {
  export type InputTuple = [
    sender: AddressLike,
    content: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    content: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    sender: string;
    content: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MessageBoard extends BaseContract {
  connect(runner?: ContractRunner | null): MessageBoard;
  waitForDeployment(): Promise<this>;

  interface: MessageBoardInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getMessage: TypedContractMethod<
    [index: BigNumberish],
    [
      [string, string, bigint] & {
        sender: string;
        content: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getMessageCount: TypedContractMethod<[], [bigint], "view">;

  getUserMessage: TypedContractMethod<
    [user: AddressLike, index: BigNumberish],
    [
      [string, string, bigint] & {
        sender: string;
        content: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getUserMessageCount: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  messages: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint] & {
        sender: string;
        content: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  postMessage: TypedContractMethod<[_content: string], [void], "nonpayable">;

  userMessages: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getMessage"
  ): TypedContractMethod<
    [index: BigNumberish],
    [
      [string, string, bigint] & {
        sender: string;
        content: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMessageCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserMessage"
  ): TypedContractMethod<
    [user: AddressLike, index: BigNumberish],
    [
      [string, string, bigint] & {
        sender: string;
        content: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserMessageCount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "messages"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint] & {
        sender: string;
        content: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "postMessage"
  ): TypedContractMethod<[_content: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userMessages"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "NewMessage"
  ): TypedContractEvent<
    NewMessageEvent.InputTuple,
    NewMessageEvent.OutputTuple,
    NewMessageEvent.OutputObject
  >;

  filters: {
    "NewMessage(address,string,uint256)": TypedContractEvent<
      NewMessageEvent.InputTuple,
      NewMessageEvent.OutputTuple,
      NewMessageEvent.OutputObject
    >;
    NewMessage: TypedContractEvent<
      NewMessageEvent.InputTuple,
      NewMessageEvent.OutputTuple,
      NewMessageEvent.OutputObject
    >;
  };
}
